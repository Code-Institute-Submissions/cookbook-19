{"changed":true,"filter":false,"title":"app.py","tooltip":"/app.py","value":"import os\nfrom flask import Flask, render_template, request, redirect, flash, url_for, session\nfrom flask_pymongo import PyMongo\nfrom bson.objectid import ObjectId\n\napp=Flask(__name__)\n\napp.secret_key=os.getenv(\"SECRET\",\"randomstring123\")\n\napp.config[\"MONGO_DBNAME\"]='milestone-3'\n#app.config[\"MONGO_URI\"]=os.getenv(\"MONGO_URI\")\n\napp.config[\"MONGO_URI\"]='mongodb+srv://Shilldon:Palad1n1@myfirstcluster-gzjbi.mongodb.net/milestone-3'\nmongo=PyMongo(app)\n\n\n#session variables:\n#user - the username of the user currently logged in\n#sort - a check to determine if the recipes returned in the search, delete or edit requests should be sorted into order\n#filters - a list of the filters currently applied to the recipe results returned. Needed to ensure the filter is applied after leaving the search page. \n#category-form - the categories against which the user is searching\n\n@app.route(\"/check_user\",methods=['POST','GET'])\ndef check_user():\n    #called on submitting login request modal form\n    usersdb=mongo.db.usersDB\n    \n    user=request.form.to_dict()\n    #logout button sends value \"logout\". If logout request received delete the user session variable\n    if user['username']==\"logout\":\n        session.pop('user')\n    else:    \n        #set the user session variable to the name submitted\n        session[\"user\"]=user['username']\n        #check if the user exists in the userDB - if not (by counting results = 0) create user\n        if usersdb.find({\"name\" : user['username']}).count()==0: \n            usersdb.insert({'name':user['username'],'favourites':[]})  \n    \n    #return to the index page. This is important to ensure recipes are only added or deleted when the user is logged in.\n    return redirect(url_for('index'))\n\n@app.route(\"/\")\ndef index():\n    #on entering the index page clear any filters and sort criteria that have been applied to search results.\n    session[\"filters\"]={}\n    session[\"sort\"]={}\n    return render_template(\"index.html\",title_text='Perfect dishes on demand')\n\n@app.route(\"/add_recipe\")\ndef add_recipe():\n    #called on selecting the 'add recipe' menu option.\n    \n    #return all the results from the ingredients collection to create an array of ingredients names.\n    #This array is passed to the autocomplete function on the page\n    ingredientsdb=mongo.db.ingredientsDB\n    ingredients=ingredientsdb.find()\n    _ingredients={}\n    for ingredient in ingredients:\n        new_ingredient={ingredient[\"name\"].capitalize():None}\n        _ingredients.update(new_ingredient)\n\n    #return all the results from the countries collection to create an array of ingredients names.\n    #This array is passed to the autocomplete function on the page\n    countrydb=mongo.db.countriesDB\n    countries=countrydb.find()\n    _countries={}\n    for country in countries:\n        new_country={country[\"name\"].capitalize():None}\n        _countries.update(new_country)\n\n    return render_template(\"add_recipe.html\", title_text='Add recipe',ingredients_list=_ingredients, country_list=_countries)\n\n@app.route('/edit_recipe/<recipe_id>')\ndef edit_recipe(recipe_id):\n    #called on selecting 'edit recipe' from the menu options\n    \n    _recipe=mongo.db.recipeDB.find_one({\"_id\":ObjectId(recipe_id)})\n    \n    #get a list of ingredients from ingredients collection to display in the auto complete input field \n    ingredientsdb=mongo.db.ingredientsDB\n    ingredients=ingredientsdb.find()\n    _ingredients={}\n    for ingredient in ingredients:\n        new_ingredient={ingredient[\"name\"][0].capitalize():None}\n        _ingredients.update(new_ingredient)\n        \n    #get a list of countries from countries collection to display in the auto complete input field \n    countrydb=mongo.db.countriesDB\n    countries=countrydb.find()\n    _countries={}\n    for country in countries:\n        new_country={country[\"name\"][0].capitalize():None}\n        _countries.update(new_country)\n        \n    return render_template('edit_recipe.html',title_text=\"Edit your recipes\",recipe=_recipe,ingredients_list=_ingredients, country_list=_countries)\n\n@app.route(\"/insertrecipe/\", methods=['POST'])\ndef insertrecipe():\n    #called on editting an existing recipe or creating a new one in order to update or add to the recipe collection.\n    \n    #set variables for the recipes, user and ingredients collections\n    recipes=mongo.db.recipeDB\n    usersdb=mongo.db.usersDB\n    ingredientsdb=mongo.db.ingredientsDB\n\n    #check whether the user is adding a new recipe or editting a recipe\n    edit=request.args.get('edit',None)\n        \n    #if editing a recipe get the ID of the recipe to edit\n    if edit=='True':\n        recipe_id=ObjectId(request.args.get('recipe_id'))\n    else:\n        #if the user is not editting an existing recipe create a new entry in the recipe collection\n        recipe_id=recipes.insert({'name':'new','favourite':[]})\n    \n    #request form data is not in flat format - arrays are created in the form for ingredients and allergen information\n    new_recipe=request.form.to_dict(flat=False)\n    #set up a list of ingredients that will be added to the recipe in the collection\n    ingredients=[]\n    #set up a dictionary for each individual ingredient which will consist of the name, quantity and unit for each ingredient.\n    ingredient={}\n    #initialise cook_time variable to convert hours and minutes to minutes total to enable easy sorting by cook time against the recipes returned from a search\n    cook_time=0\n\n    #iterate through the form dictionary to correctly format the user input to add to the new recipe document\n    #each recipe ID is stored against the relevant document in each category collection:\n    #allergens, authors, countries, difficulty, ingredients, meals and users (for favourites)\n    \n    for key, key_name in new_recipe.items():\n        #flatten dict for non-list items which have become lists through request object\n        if key!='type' and key!='amount' and key!='unit' and key!='allergens':\n            new_recipe[key]=new_recipe[key][0].lower()\n            #check if the recipe has been marked as the user's favourite\n            if key=='favourite':\n                #get the list of users for whom this is a favourite recipe\n                recipe_doc=recipes.find_one({\"_id\" : ObjectId(recipe_id)})\n                #get the list of users for whom this is a favourite recipe from the recipe document 'favourite' list element\n                favourites=recipe_doc[\"favourite\"]                   \n                #check whether a user is logged in and if this user has marked this recipe as a favourite\n                \n                if \"user\" in session:\n                    user_doc=usersdb.find_one({\"name\":session[\"user\"]})\n                    if new_recipe[key].lower() =='true':\n                        #if the user has  logged in and their ID is not stored in the favourites list for this recipe document then add the user ID to the favourites list \n                        #also add the recipe id to the favourites list element in the user document. \n                        if recipe_id not in user_doc[\"favourites\"]:\n                            usersdb.update({\"name\": session[\"user\"]},{\"$push\":{\"favourites\" : recipe_id}})\n                            favourites.append(str(user_doc[\"_id\"]))\n                    else:\n                        #if the user has not marked this recipe as a favourite and the user ID is in the favourites list for the recipe document\n                        #then remove the user id  from the favourites list and remove the recipe ID from the user document favourites list                     \n                        if recipe_id in user_doc[\"favourites\"]:\n                            usersdb.update({\"name\": session[\"user\"]},{\"$pull\":{\"favourites\" : recipe_id}}) \n                            favourites.remove(str(user_doc[\"_id\"]))\n                \n            if key=='hours' or key=='minutes' or key=='calories':\n                #convert from string to int, if needed\n                try:\n                    new_recipe[key]=int(new_recipe[key])\n                except ValueError:\n                    new_recipe[key]=0\n            if key=='hours':\n                #convert hours to minutes and add to cook time variable\n                cook_time=new_recipe[key]*60\n            if key=='minutes':\n                cook_time=cook_time+new_recipe[key]\n        \n        #iterate through the ingredients submitted\n        elif key=='type':\n            #create dictionaries for each ingredient with key values of ingredient type, amount and units\n            #update the list of ingredients with each ingredient dictionary\n            i=0\n            for ingredient_type in key_name:\n                ingredient={ 'type' : ingredient_type.lower() , 'amount' : new_recipe['amount'][i] , 'unit' : new_recipe['unit'][i] }\n                #insert ingredient object into array of ingredients\n                ingredients.append(ingredient)\n                i+=1       \n\n    #update the new_recipe dict with the elements that have been formatted, above.\n    #insert the list of user IDs in the favourite lists to the new_recipe dict\n    new_recipe[\"favourite\"]=favourites    \n    #insert the new cook_time key into the new_recipe dict\n    new_recipe[\"cook_time\"]=cook_time\n    #insert the new ingredients array into the new_receipe dict\n    new_recipe['ingredients']=ingredients  \n\n    #the recipe dictionary is now ready to add/update the document in the recipes collection\n\n\n    #The recipe ID, however needs to be added to/removed from the recipe lists in other collections.\n    \n    #check if the ingredients submitted are in the ingredients collection and add/remove ingredients from the collection\n    #get the ID of the current recipe that has been added/is being editted\n    current_recipe=recipes.find_one({\"_id\" : ObjectId(recipe_id)})\n    #create list of the 'new' ingredients that have been submitted\n    new_ingredients=ingredients\n\n    for ingredient in new_ingredients:\n        ingredient_type=ingredient\n        #check if this is an existing recipe that is being editted\n        if edit==\"True\":\n            #if so get a list of the ingredients that are currently in the recipe document (before it was editted)\n            #this is to check whether the ingredients have been changed. If so the ingredients may need to be added or removed from the igredients collection\n            current_ingredients=current_recipe[\"ingredients\"]\n            #check if each new ingredient is already in the list of ingredients for this recipe.\n            #if it is there is no need to take further action (it does not need to be added to the ingredients collection)\n            if ingredient in current_ingredients:\n                ingredient_index=current_ingredients.index(ingredient)\n                current_ingredients.remove(ingredient)\n        #find the ingredient document in the ingredients collection        \n        new_ingredient_doc=ingredientsdb.find_one({\"name\" : ingredient[\"type\"].lower()})\n        \n        #for each ingredient, check whether it exists in the ingredient collection.\n        if new_ingredient_doc!=None:\n            #if it already exists, get the ingredient ID\n            new_ingredient_id=new_ingredient_doc[\"_id\"]\n        else:\n            #if the ingredient is new and has no document create a new ID\n            new_ingredient_id=ingredientsdb.insert({\"name\" : ingredient[\"type\"].lower(), \"recipe\":[]})\n            new_ingredient_doc=ingredientsdb.find_one({\"_id\" : new_ingredient_id})\n        #check if the id of the recipe is stored in the ingredient doc in the ingredient collection.\n        #if not add the recipe to the recipe list in the ingredient doc\n        if recipe_id not in new_ingredient_doc[\"recipe\"]:\n            ingredientsdb.update({\"_id\": new_ingredient_id},{\"$push\":{\"recipe\" : recipe_id}})\n\n    #the current_ingredients list now only contains those ingredients which have been removed from the recipe.\n    #the recipe ID needs to be removed from each recipe list in each ingredient doc.\n    if edit==\"True\":\n        for ingredient in current_ingredients:\n            if ingredient not in new_ingredients:\n                current_ingredient_doc=ingredientsdb.find_one({\"name\" : ingredient[\"type\"].lower()})  \n                current_ingredient_id=current_ingredient_doc[\"_id\"]\n                ingredientsdb.update({\"_id\": current_ingredient_id},{\"$pull\":{\"recipe\" : recipe_id}})\n                current_ingredient_doc=ingredientsdb.find_one({\"_id\": current_ingredient_id})\n                #if the list of recipes for this ingredient is empty then this ingredient is not used in any recipes and can be removed from the ingredients collection.\n                if len(current_ingredient_doc[\"recipe\"])==0:\n                    ingredientsdb.remove({\"_id\": current_ingredient_id})  \n    \n    #check each of the input fields - allergens, meal, country, author and difficulty\n    #to see if values have been changed\n    categories=[\"allergens\",\"meal\",\"country\",\"author\",\"difficulty\"]\n    for category in categories:\n        #check if the category is in the recipe dict. if it is then format correctly if the category itself contains a list of elements (e.g. allergens)\n        if category in new_recipe:\n            if type(new_recipe[category]) is list:\n                new_category=new_recipe[category]\n            else:    \n                new_category=[]\n                new_category.append(new_recipe[category])\n        else:\n            #otherwise set the category list to empty\n            new_category=[]\n        \n        if category==\"allergens\":    \n            categorydb=mongo.db.allergensDB\n        elif category==\"meal\":\n            categorydb=mongo.db.mealDB\n        elif category==\"country\":\n            categorydb=mongo.db.countriesDB\n        elif category==\"author\":\n            categorydb=mongo.db.authorDB            \n        elif category==\"difficulty\":\n            categorydb=mongo.db.difficultyDB   \n\n        for value in new_category:\n            #check if we are editting an existing recipe, if so check whether any values exist in both the updated and current recipes \n            #if so remove them from the list to later delete the recipe ID from the values that remain in the list (like ingredients iteration, above)\n            if edit==\"True\":\n                if category in current_recipe:\n                    if type(new_recipe[category]) is list:\n                        current_category=current_recipe[category]\n                    else:    \n                        current_category=[]\n                        current_category.append(new_recipe[category])                    \n                    if value in current_category:\n                        category_index=current_category.index(value)\n                        current_category.remove(value)\n        \n            #get the name of the new value in this category        \n            new_category_doc=categorydb.find_one({\"name\" : value.lower()})\n            if value:\n                if new_category_doc!=None:\n                    #if the particular element exists then get the associated doc from the relevant category collection\n                    new_category_id=new_category_doc[\"_id\"]\n                else:\n                    #if it doesn't exist and is not blank create a new doc with the name of the element \n                    #and create a recipe list in the document containing the ID of this recipe\n                    new_category_id=categorydb.insert({\"name\" : value.lower(), \"recipe\":[]})\n                    new_category_doc=categorydb.find_one({\"_id\" : new_category_id})\n                if recipe_id not in new_category_doc[\"recipe\"]:\n                    #check if the recipe is already in the new doc, if it isn't add the recipe ID to this particular category in the DB\n                    categorydb.update({\"_id\" : new_category_id},{\"$push\":{\"recipe\":recipe_id}})\n\n        if edit==\"True\":\n            #if we are editing a recipe check whether there are any remaining values in the category list\n            #if so this means that the recipe has been removed from the relevant category\n            if category in current_recipe:\n                #for all the values remove the recipe ID from the particular category in the relevant collection/\n                for value in current_category:\n                    if value not in new_category:\n                        current_category_doc=categorydb.find_one({\"name\" : value})\n                        current_category_id=current_category_doc[\"_id\"]\n                        categorydb.update({\"_id\" : current_category_id},{\"$pull\" : {\"recipe\" : recipe_id}})\n                        current_category_doc=categorydb.find_one({\"_id\" : current_category_id})\n                        #if this particular category is empty, delete it from the DB\n                        if len(current_category_doc[\"recipe\"])==0:\n                            categorydb.remove({\"_id\" : current_category_id})\n\n    #update the recipe document in the recipe collection with the new recipe dictionary\n    recipes.update({'_id':ObjectId(recipe_id)},new_recipe)\n        \n    #display the newly added/edited recipe. \n    return redirect(url_for('display_recipe',recipe_id=recipe_id,added_recipe=\"true\"))\n\n@app.route(\"/search\")\ndef search():\n    #called on selecting the 'search categories' menu option\n    \n    #check the category_form session variable - these are the categories selected by the user to search against.\n    #e.g. particular allergens such as eggs, dairy, meat etc.\n    #if the category form exists, delete it.\n    try:\n        session.pop(\"category_form\")\n    except KeyError:\n        pass    \n    categories=[\"ingredients\",\"allergens\",\"difficulty\",\"meal\",\"country\",\"author\"]\n    _category_lists={}\n    \n    #for each category create a list of the items in each category collection.\n    #These will provide the filters against which the user can search\n    for category in categories:\n        item_list=[]\n        if category==\"ingredients\":\n            coll=mongo.db.ingredientsDB.find().sort(\"name\")\n        elif category==\"allergens\":\n            coll=mongo.db.allergensDB.find().sort(\"name\")\n        elif category==\"meal\":\n            coll=mongo.db.mealDB.find().sort(\"name\")\n        elif category==\"country\":\n            coll=mongo.db.countriesDB.find().sort(\"name\")\n        elif category==\"author\":\n            coll=mongo.db.authorDB.find().sort(\"name\")\n            \n        for item in coll:\n            item_list.append(item[\"name\"].capitalize())   \n        \n        _category_lists[category]=item_list  \n    \n    #display the search page and pass the list of items against which the user can filter their results.\n    return render_template(\"search.html\",title_text=\"Find your favourites\",category_list=_category_lists)\n\n@app.route(\"/recipe_list\", methods=['POST','GET'])\ndef recipe_list():\n    #called on selecting the search recipes option from the menu or 'apply filters' button\n    \n    #need to check if the category_form session variable exists.\n    #if it does it needs to be deleted so that, after displaying a recipe selecting 'back' will return to recipe_list not category_search\n    try:\n        session.pop(\"category_form\")\n    except KeyError:\n        pass\n    \n    #check if the session variable sort exists. If it does not then get the value from the form and set it to the session variable.\n    #the sort variable is used to sort the results list into order, depending on the criteria chosen by the user on the recipe_list page\n    if session.get('sort'):\n        _sort=session[\"sort\"]\n    else:\n        _sort=request.form.get('sort_by')\n        session[\"sort\"]=_sort\n    \n    #the user can select various filters on the recipe_list page.\n    #if returning to the recipe list page from the display recipe page the results will need to be pre-filtered, based on the filter criteria the user\n    #chose previously. This is shown by the filter variable set as 'existing'. If there is a session variable for filters the filter dictionary is taken from this.\n    #if new filter criteria are being used (because the apply filters button has been clicked) then the filter dictionary is pulled from the form\n    #if neither existing or new filter criteria are being used (because the page has been accessed for the first time, or the filter criteria have been cleared) initialise the filter dictionary\n    #the filter dictionary is later applied to the mongo search \n    filter=request.args.get('filter',None)    \n    if filter=='existing' and session[\"filters\"]:\n        _filter_dict=session[\"filters\"]\n    elif filter==\"new\":\n        _filter_dict=request.form.to_dict() \n    else:\n        _filter_dict={}\n    \n    #get the action request from the page to determine what sort of list is to be displayed and display appropriate title text \n    _todo=request.args.get('action',None)\n\n    if _todo==\"delete\":\n        title_text_value=\"Delete recipes\"\n    elif _todo==\"edit\":\n        title_text_value=\"Edit recipes\"\n    else:\n        title_text_value=\"Your recipes\"\n\n\n    #if the user is editting or deleting recipes then they can only edit or delete their own recipes.\n    #accordingly automatically set up a filter for the user's ID.\n    #otherwise get the filter_author from the form\n    if _todo==\"delete\" or _todo==\"edit\":\n        filter_author=session[\"user\"].lower()\n        _filter_dict.update({\"author\" : filter_author.lower()})\n    else:\n        filter_author=request.form.get('author')\n\n    #if the user has selected filter values and/or if the user is editing/deleting recipes) then create a dictionary to pass to mongo to filter the results\n    if filter=='new':    \n        #first remove the sort_by value from the input received from the form.\n        #sort_by is not a filter but used to sort results.\n        try:\n            _filter_dict.pop(\"sort_by\")\n        except KeyError:\n            pass\n        \n        #check if each filter has input provided from the form, if not, remove the filter from the dictionary\n        #favourites are filtered by the recipe ID held in the user doc favourites element\n        filter_favourites=request.form.get('favourite')\n        if filter_favourites:\n            user_doc=mongo.db.usersDB.find_one({\"name\":session[\"user\"]})\n            user_id=str(user_doc[\"_id\"])\n            _filter_dict.update({\"favourite\" : { \"$in\" : [user_id]}})\n        else:\n            _filter_dict.pop(\"favourite\",None)            \n                \n        filter_meal=request.form.get('meal')\n        if filter_meal:\n            _filter_dict.update({\"meal\":filter_meal})\n        else:\n            _filter_dict.pop(\"meal\",None)\n        \n        filter_allergens=request.form.getlist('allergens')\n        if filter_allergens:\n            _filter_dict.update({\"allergens\" : {  '$nin' : filter_allergens }}) \n        else:\n            _filter_dict.pop(\"allergens\",None)\n            \n        filter_calories=request.form.get('calories')\n        if filter_calories:\n            if filter_calories==999:\n                filter_calories={'$gt':int(filter_calories)}\n            else:\n                filter_calories={'$lt':int(filter_calories)}  \n            _filter_dict.update({\"calories\":filter_calories})\n        else:\n            _filter_dict.pop(\"calories\",None)\n            \n        #the cook time filter needs further definition. A simply int is passed from the form. For filtering this needs to be\n        #converted to a $gt or $lt key pair\n        filter_cooktime=request.form.get('cook_time')\n        if filter_cooktime:\n            if filter_cooktime==179:\n                filter_cooktime={'$gt':int(filter_cooktime)}\n            else:\n                filter_cooktime={'$lt':int(filter_cooktime)}  \n            _filter_dict.update({\"cook_time\" : filter_cooktime})\n        else:\n            _filter_dict.pop(\"cook_time\",None)\n            \n        filter_country=request.form.get('country')\n        if filter_country:\n            _filter_dict.update({\"country\" : filter_country.lower() })\n        else:\n            _filter_dict.pop(\"country\",None)\n        \n        if filter_author:\n            _filter_dict.update({\"author\" : filter_author.lower()})\n        else:    \n            _filter_dict.pop(\"author\",None)\n\n        #once the dictionary has been set up save it to the session variable.\n        #session variable is required for moving between pages so that, when returning to the search page the filter criteria are retained.\n        session[\"filters\"]=_filter_dict\n\n    if _sort:\n        _recipe_list=mongo.db.recipeDB.find(_filter_dict).sort(_sort,1) \n    else:\n        _recipe_list=mongo.db.recipeDB.find(_filter_dict)\n\n    #create lists for dropdown filter menus for authors and countries on the recipe_list page\n    list_of_countries=mongo.db.countriesDB.find()\n    list_of_authors=mongo.db.authorDB.find()\n    _author_list=[]\n    for author in list_of_authors:\n        _author_list.append(author[\"name\"].capitalize())\n    _country_list=[]\n    for country in list_of_countries:\n        _country_list.append(country[\"name\"].capitalize())    \n\n    #find the total number of results returned to display to the user.\n    _total_results=_recipe_list.count()\n    \n    return render_template(\"recipe_list.html\",title_text=title_text_value,recipes=_recipe_list, countries=_country_list,authors=_author_list,action=_todo,filters=_filter_dict, sort=_sort, total_results=_total_results)\n\n@app.route('/display_recipe/<recipe_id>')\ndef display_recipe(recipe_id):\n    #called from selecting a recipe in the recipe list, display category or after submitting add/edit input forms\n    \n    #get the recipe documentment from the recipe collection\n    _recipe=mongo.db.recipeDB.find_one({\"_id\":ObjectId(recipe_id)})\n    \n    #check request came from add or edit recipe to ensure clicking back will render the edit recipe page correctly\n    _added=request.args.get('added_recipe',None)\n    #check if the user is logged on, if not pass false value for favourite so no star is shown on display_recipe.html\n    if \"user\" in session:\n        user_doc=mongo.db.usersDB.find_one({\"name\" : session[\"user\"]})\n        #check if this recipe is stored in this user's favourite list. If so mark pass value to mark with a star on display_recipe.html\n        if ObjectId(recipe_id) in user_doc[\"favourites\"]:\n            _recipe[\"favourite\"]=True\n        else:\n            _recipe[\"favourite\"]=False    \n    else:\n        _recipe[\"favourite\"]=False               \n    title_text='Your recipe'\n    return render_template('display_recipe.html',title_text='Your recipe',recipe=_recipe,added=_added)\n\n@app.route('/delete_recipe',methods=['POST'])\ndef delete_recipe():\n    \n    #called from confirming deletion of recipe on delete modal\n    #get the ID of the recipe being deleted\n    recipe_id=request.form.get('recipe_id')\n    #get the recipe document from the recipe collection\n    recipe=mongo.db.recipeDB.find_one({\"_id\":ObjectId(recipe_id)})\n\n    #iterate through the elements in the document and remove the recipe ID from each element in each category for which the recipe has an entry\n    for key in recipe:\n        if key=='favourite':\n            #need to iterate through the complete list of users who have marked this recipe as favourite and remove it from their favourite recipe list elements in the relevant user doc\n            for value in recipe[key]:\n                mongo.db.usersDB.update({\"_id\" : ObjectId(value)},{\"$pull\" : {\"favourites\" : ObjectId(recipe_id)}})\n        if key==\"meal\":\n            mongo.db.mealDB.update({\"name\" : recipe[key].lower()},{\"$pull\" : {\"recipe\" : ObjectId(recipe_id)}})\n        if key==\"difficulty\":\n            mongo.db.difficultyDB.update({\"name\" : recipe[key].lower()},{\"$pull\" : {\"recipe\" : ObjectId(recipe_id)}})\n        if key==\"allergens\":\n            #need to iterate through all allergens and remove the recipe ID from each allergen document recipe list\n            for value in recipe[key]:\n                mongo.db.allergensDB.update({\"name\" : value},{\"$pull\" : {\"recipe\" : ObjectId(recipe_id)}})\n        if key==\"country\":\n            mongo.db.countriesDB.update({\"name\" : recipe[key].lower()},{\"$pull\" : {\"recipe\" : ObjectId(recipe_id)}})\n            #check if there are any recipes stored against this country. If not delete the country doc from the country collection \n            check_and_delete_empty_doc(recipe[key].lower(),mongo.db.countriesDB) \n        if key==\"author\":\n            mongo.db.authorDB.update({\"name\" : recipe[key].lower()},{\"$pull\" : {\"recipe\" : ObjectId(recipe_id)}})\n            #check if there are any recipes stored against this author. If not delete the author doc from the author collection\n            check_and_delete_empty_doc(recipe[key].lower(),mongo.db.authorDB)            \n        if key==\"ingredients\":\n            for value in recipe[key]:\n                mongo.db.ingredientsDB.update({\"name\" : value[\"type\"]},{\"$pull\" : {\"recipe\" : ObjectId(recipe_id)}})\n                #check if there are any recipes stored against this ingredient. If not delete the ingredient doc from the ingredient collection\n                check_and_delete_empty_doc(value[\"type\"],mongo.db.ingredientsDB)\n               \n    #finally relete the recipe doc from the recipe collection\n    mongo.db.recipeDB.remove({\"_id\":ObjectId(recipe_id)})\n    \n    #return to the recipe list page\n    return redirect(url_for('.recipe_list',action='delete'))\n\ndef check_and_delete_empty_doc(item,coll):\n    #called from the delete_recipe function.\n    document=coll.find_one({\"name\" : item})\n    #check if the document exists, if so and there are no recipes registered against the document delete it from the collection\n    if document!=None:\n        if len(document[\"recipe\"])==0:\n            coll.remove({\"name\" : item})                      \n\n@app.route('/display_categories', methods=['POST','GET'])\ndef display_categories():\n    #called from the search page after user selects filters to determine which categories are to be displayed\n    #check if the user has already submitted the form listing the categories to be displayed.\n    #This session variable ensures, after displaying a recipe, the selected categories are correctly displayed again\n    try:\n        selected_categories=session[\"category_form\"]  \n    except KeyError:\n        #if no session variable exists get the categories from the user submitted form.\n        selected_categories=request.form.to_dict(flat=False)\n        session[\"category_form\"]=selected_categories        \n  \n    #get the categories against which the user is searching\n    category=list(selected_categories.keys())[0]    \n    _item_list=[]\n\n    #iterate through the categories selected for filtering and create lists of the items in each category that have been selected.    \n    for key in selected_categories:\n        for item in selected_categories[key]:\n            _item_list.append(item.lower())\n\n    i=0\n    #initialise a dictionary of recipes that are in each selected category\n    recipes_in_category={}\n    #set a search value, for all categories except allergens the recipes returned need to contain the element searched against\n    #in the case of allergens the recipes returned must not contain the specific element.\n    search_value=\"$in\"\n    if category==\"allergens\":\n        coll=mongo.db.allergensDB\n        search_value=\"$nin\"\n    elif category==\"meal\":\n        coll=mongo.db.mealDB\n    elif category==\"ingredients\":\n        coll=mongo.db.ingredientsDB\n    elif category==\"country\":\n        coll=mongo.db.countriesDB        \n    elif category==\"author\":\n        coll=mongo.db.authorDB   \n    elif category==\"difficulty\":\n        coll=mongo.db.difficultyDB    \n    \n    #perform mongo search against each category item and crate list of recipes to display for each category.\n    for i in range(0,len(_item_list)):\n        category_objects=coll.find({\"name\" : {'$eq' : _item_list[i]}})\n        recipe_ids=[]\n\n        for object in category_objects:\n            for recipe in object[\"recipe\"]:\n                recipe_ids.append(ObjectId(recipe))\n\n        recipes=mongo.db.recipeDB.find({'_id' : {search_value : recipe_ids}})\n        recipes_in_category[_item_list[i]]=list(recipes)\n\n    return render_template('display_category.html',category=category,items=_item_list,recipes=recipes_in_category, title_text=\"Your recipes\")\n    \nif __name__ ==\"__main__\":\n    app.run(host=os.environ.get(\"IP\"), port=int(os.environ.get(\"PORT\")), debug=True)    \n    ","undoManager":{"mark":97,"position":98,"stack":[[{"start":{"row":11,"column":0},"end":{"row":12,"column":0},"action":"insert","lines":["",""],"id":2}],[{"start":{"row":12,"column":0},"end":{"row":12,"column":76},"action":"insert","lines":["mongodb+srv://Shilldon:Palad1n1@myfirstcluster-gzjbi.mongodb.net/milestone-3"],"id":3}],[{"start":{"row":10,"column":0},"end":{"row":10,"column":1},"action":"insert","lines":["#"],"id":4}],[{"start":{"row":12,"column":0},"end":{"row":12,"column":24},"action":"insert","lines":["app.config[\"MONGO_URI\"]="],"id":6}],[{"start":{"row":12,"column":24},"end":{"row":12,"column":25},"action":"insert","lines":["'"],"id":7}],[{"start":{"row":12,"column":101},"end":{"row":12,"column":102},"action":"insert","lines":["'"],"id":8}],[{"start":{"row":36,"column":67},"end":{"row":36,"column":79},"action":"remove","lines":[", 'liked':[]"],"id":9}],[{"start":{"row":150,"column":24},"end":{"row":151,"column":0},"action":"insert","lines":["",""],"id":10},{"start":{"row":151,"column":0},"end":{"row":151,"column":24},"action":"insert","lines":["                        "]}],[{"start":{"row":150,"column":24},"end":{"row":150,"column":25},"action":"insert","lines":["p"],"id":11},{"start":{"row":150,"column":25},"end":{"row":150,"column":26},"action":"insert","lines":["r"]},{"start":{"row":150,"column":26},"end":{"row":150,"column":27},"action":"insert","lines":["i"]},{"start":{"row":150,"column":27},"end":{"row":150,"column":28},"action":"insert","lines":["n"]},{"start":{"row":150,"column":28},"end":{"row":150,"column":29},"action":"insert","lines":["t"]}],[{"start":{"row":150,"column":29},"end":{"row":150,"column":31},"action":"insert","lines":["()"],"id":12}],[{"start":{"row":150,"column":30},"end":{"row":150,"column":32},"action":"insert","lines":["\"\""],"id":13}],[{"start":{"row":150,"column":31},"end":{"row":150,"column":32},"action":"insert","lines":["u"],"id":14},{"start":{"row":150,"column":32},"end":{"row":150,"column":33},"action":"insert","lines":["s"]},{"start":{"row":150,"column":33},"end":{"row":150,"column":34},"action":"insert","lines":["e"]},{"start":{"row":150,"column":34},"end":{"row":150,"column":35},"action":"insert","lines":["r"]},{"start":{"row":150,"column":35},"end":{"row":150,"column":36},"action":"insert","lines":["_"]},{"start":{"row":150,"column":36},"end":{"row":150,"column":37},"action":"insert","lines":["d"]},{"start":{"row":150,"column":37},"end":{"row":150,"column":38},"action":"insert","lines":["o"]},{"start":{"row":150,"column":38},"end":{"row":150,"column":39},"action":"insert","lines":["c"]}],[{"start":{"row":150,"column":39},"end":{"row":150,"column":40},"action":"insert","lines":["["],"id":15},{"start":{"row":150,"column":40},"end":{"row":150,"column":41},"action":"insert","lines":["f"]},{"start":{"row":150,"column":41},"end":{"row":150,"column":42},"action":"insert","lines":["a"]},{"start":{"row":150,"column":42},"end":{"row":150,"column":43},"action":"insert","lines":["v"]},{"start":{"row":150,"column":43},"end":{"row":150,"column":44},"action":"insert","lines":["o"]},{"start":{"row":150,"column":44},"end":{"row":150,"column":45},"action":"insert","lines":["u"]},{"start":{"row":150,"column":45},"end":{"row":150,"column":46},"action":"insert","lines":["r"]},{"start":{"row":150,"column":46},"end":{"row":150,"column":47},"action":"insert","lines":["i"]},{"start":{"row":150,"column":47},"end":{"row":150,"column":48},"action":"insert","lines":["t"]},{"start":{"row":150,"column":48},"end":{"row":150,"column":49},"action":"insert","lines":["e"]},{"start":{"row":150,"column":49},"end":{"row":150,"column":50},"action":"insert","lines":["s"]},{"start":{"row":150,"column":50},"end":{"row":150,"column":51},"action":"insert","lines":["]"]}],[{"start":{"row":150,"column":52},"end":{"row":150,"column":53},"action":"insert","lines":[","],"id":16},{"start":{"row":150,"column":53},"end":{"row":150,"column":54},"action":"insert","lines":["i"]},{"start":{"row":150,"column":54},"end":{"row":150,"column":55},"action":"insert","lines":["u"]}],[{"start":{"row":150,"column":54},"end":{"row":150,"column":55},"action":"remove","lines":["u"],"id":17},{"start":{"row":150,"column":53},"end":{"row":150,"column":54},"action":"remove","lines":["i"]}],[{"start":{"row":150,"column":53},"end":{"row":150,"column":54},"action":"insert","lines":["u"],"id":18},{"start":{"row":150,"column":54},"end":{"row":150,"column":55},"action":"insert","lines":["s"]},{"start":{"row":150,"column":55},"end":{"row":150,"column":56},"action":"insert","lines":["e"]},{"start":{"row":150,"column":56},"end":{"row":150,"column":57},"action":"insert","lines":["r"]},{"start":{"row":150,"column":57},"end":{"row":150,"column":58},"action":"insert","lines":["_"]},{"start":{"row":150,"column":58},"end":{"row":150,"column":59},"action":"insert","lines":["d"]},{"start":{"row":150,"column":59},"end":{"row":150,"column":60},"action":"insert","lines":["o"]},{"start":{"row":150,"column":60},"end":{"row":150,"column":61},"action":"insert","lines":["c"]}],[{"start":{"row":150,"column":61},"end":{"row":150,"column":63},"action":"insert","lines":["[]"],"id":19}],[{"start":{"row":150,"column":62},"end":{"row":150,"column":64},"action":"insert","lines":["\"\""],"id":20}],[{"start":{"row":150,"column":63},"end":{"row":150,"column":64},"action":"insert","lines":["f"],"id":21},{"start":{"row":150,"column":64},"end":{"row":150,"column":65},"action":"insert","lines":["a"]},{"start":{"row":150,"column":65},"end":{"row":150,"column":66},"action":"insert","lines":["v"]},{"start":{"row":150,"column":66},"end":{"row":150,"column":67},"action":"insert","lines":["o"]},{"start":{"row":150,"column":67},"end":{"row":150,"column":68},"action":"insert","lines":["u"]},{"start":{"row":150,"column":68},"end":{"row":150,"column":69},"action":"insert","lines":["r"]},{"start":{"row":150,"column":69},"end":{"row":150,"column":70},"action":"insert","lines":["i"]},{"start":{"row":150,"column":70},"end":{"row":150,"column":71},"action":"insert","lines":["o"]},{"start":{"row":150,"column":71},"end":{"row":150,"column":72},"action":"insert","lines":["t"]},{"start":{"row":150,"column":72},"end":{"row":150,"column":73},"action":"insert","lines":["e"]},{"start":{"row":150,"column":73},"end":{"row":150,"column":74},"action":"insert","lines":["s"]},{"start":{"row":150,"column":74},"end":{"row":150,"column":75},"action":"insert","lines":["="]}],[{"start":{"row":150,"column":74},"end":{"row":150,"column":75},"action":"remove","lines":["="],"id":22},{"start":{"row":150,"column":73},"end":{"row":150,"column":74},"action":"remove","lines":["s"]},{"start":{"row":150,"column":72},"end":{"row":150,"column":73},"action":"remove","lines":["e"]},{"start":{"row":150,"column":71},"end":{"row":150,"column":72},"action":"remove","lines":["t"]},{"start":{"row":150,"column":70},"end":{"row":150,"column":71},"action":"remove","lines":["o"]}],[{"start":{"row":150,"column":70},"end":{"row":150,"column":71},"action":"insert","lines":["t"],"id":23},{"start":{"row":150,"column":71},"end":{"row":150,"column":72},"action":"insert","lines":["e"]},{"start":{"row":150,"column":72},"end":{"row":150,"column":73},"action":"insert","lines":["s"]}],[{"start":{"row":140,"column":71},"end":{"row":141,"column":0},"action":"insert","lines":["",""],"id":24},{"start":{"row":141,"column":0},"end":{"row":141,"column":20},"action":"insert","lines":["                    "]},{"start":{"row":141,"column":20},"end":{"row":141,"column":21},"action":"insert","lines":["p"]},{"start":{"row":141,"column":21},"end":{"row":141,"column":22},"action":"insert","lines":["r"]},{"start":{"row":141,"column":22},"end":{"row":141,"column":23},"action":"insert","lines":["i"]},{"start":{"row":141,"column":23},"end":{"row":141,"column":24},"action":"insert","lines":["n"]},{"start":{"row":141,"column":24},"end":{"row":141,"column":25},"action":"insert","lines":["t"]}],[{"start":{"row":141,"column":25},"end":{"row":141,"column":27},"action":"insert","lines":["()"],"id":25}],[{"start":{"row":141,"column":26},"end":{"row":141,"column":28},"action":"insert","lines":["\"\""],"id":26}],[{"start":{"row":141,"column":27},"end":{"row":141,"column":28},"action":"insert","lines":["u"],"id":27},{"start":{"row":141,"column":28},"end":{"row":141,"column":29},"action":"insert","lines":["i"]},{"start":{"row":141,"column":29},"end":{"row":141,"column":30},"action":"insert","lines":["s"]},{"start":{"row":141,"column":30},"end":{"row":141,"column":31},"action":"insert","lines":["e"]},{"start":{"row":141,"column":31},"end":{"row":141,"column":32},"action":"insert","lines":["r"]}],[{"start":{"row":141,"column":31},"end":{"row":141,"column":32},"action":"remove","lines":["r"],"id":28},{"start":{"row":141,"column":30},"end":{"row":141,"column":31},"action":"remove","lines":["e"]},{"start":{"row":141,"column":29},"end":{"row":141,"column":30},"action":"remove","lines":["s"]},{"start":{"row":141,"column":28},"end":{"row":141,"column":29},"action":"remove","lines":["i"]}],[{"start":{"row":141,"column":28},"end":{"row":141,"column":29},"action":"insert","lines":["s"],"id":29},{"start":{"row":141,"column":29},"end":{"row":141,"column":30},"action":"insert","lines":["e"]},{"start":{"row":141,"column":30},"end":{"row":141,"column":31},"action":"insert","lines":["r"]},{"start":{"row":141,"column":31},"end":{"row":141,"column":32},"action":"insert","lines":["_"]},{"start":{"row":141,"column":32},"end":{"row":141,"column":33},"action":"insert","lines":["d"]},{"start":{"row":141,"column":33},"end":{"row":141,"column":34},"action":"insert","lines":["o"]},{"start":{"row":141,"column":34},"end":{"row":141,"column":35},"action":"insert","lines":["c"]}],[{"start":{"row":141,"column":36},"end":{"row":141,"column":37},"action":"insert","lines":[","],"id":30},{"start":{"row":141,"column":37},"end":{"row":141,"column":38},"action":"insert","lines":["u"]},{"start":{"row":141,"column":38},"end":{"row":141,"column":39},"action":"insert","lines":["s"]},{"start":{"row":141,"column":39},"end":{"row":141,"column":40},"action":"insert","lines":["e"]},{"start":{"row":141,"column":40},"end":{"row":141,"column":41},"action":"insert","lines":["r"]},{"start":{"row":141,"column":41},"end":{"row":141,"column":42},"action":"insert","lines":["_"]},{"start":{"row":141,"column":42},"end":{"row":141,"column":43},"action":"insert","lines":["d"]}],[{"start":{"row":141,"column":43},"end":{"row":141,"column":44},"action":"insert","lines":["o"],"id":31},{"start":{"row":141,"column":44},"end":{"row":141,"column":45},"action":"insert","lines":["c"]}],[{"start":{"row":622,"column":79},"end":{"row":622,"column":84},"action":"remove","lines":["False"],"id":32},{"start":{"row":622,"column":79},"end":{"row":622,"column":80},"action":"insert","lines":["T"]},{"start":{"row":622,"column":80},"end":{"row":622,"column":81},"action":"insert","lines":["r"]},{"start":{"row":622,"column":81},"end":{"row":622,"column":82},"action":"insert","lines":["u"]},{"start":{"row":622,"column":82},"end":{"row":622,"column":83},"action":"insert","lines":["e"]}],[{"start":{"row":139,"column":16},"end":{"row":140,"column":0},"action":"insert","lines":["",""],"id":33},{"start":{"row":140,"column":0},"end":{"row":140,"column":16},"action":"insert","lines":["                "]}],[{"start":{"row":139,"column":16},"end":{"row":140,"column":0},"action":"insert","lines":["",""],"id":34},{"start":{"row":140,"column":0},"end":{"row":140,"column":16},"action":"insert","lines":["                "]},{"start":{"row":140,"column":16},"end":{"row":140,"column":17},"action":"insert","lines":["p"]},{"start":{"row":140,"column":17},"end":{"row":140,"column":18},"action":"insert","lines":["r"]},{"start":{"row":140,"column":18},"end":{"row":140,"column":19},"action":"insert","lines":["i"]},{"start":{"row":140,"column":19},"end":{"row":140,"column":20},"action":"insert","lines":["n"]},{"start":{"row":140,"column":20},"end":{"row":140,"column":21},"action":"insert","lines":["t"]}],[{"start":{"row":140,"column":21},"end":{"row":140,"column":23},"action":"insert","lines":["()"],"id":35}],[{"start":{"row":140,"column":22},"end":{"row":140,"column":24},"action":"insert","lines":["\"\""],"id":36}],[{"start":{"row":140,"column":23},"end":{"row":140,"column":24},"action":"insert","lines":["u"],"id":37},{"start":{"row":140,"column":24},"end":{"row":140,"column":25},"action":"insert","lines":["s"]},{"start":{"row":140,"column":25},"end":{"row":140,"column":26},"action":"insert","lines":["e"]},{"start":{"row":140,"column":26},"end":{"row":140,"column":27},"action":"insert","lines":["r"]},{"start":{"row":140,"column":27},"end":{"row":140,"column":28},"action":"insert","lines":["="]}],[{"start":{"row":140,"column":29},"end":{"row":140,"column":30},"action":"insert","lines":[","],"id":38},{"start":{"row":140,"column":30},"end":{"row":140,"column":31},"action":"insert","lines":["u"]},{"start":{"row":140,"column":31},"end":{"row":140,"column":32},"action":"insert","lines":["s"]},{"start":{"row":140,"column":32},"end":{"row":140,"column":33},"action":"insert","lines":["e"]},{"start":{"row":140,"column":33},"end":{"row":140,"column":34},"action":"insert","lines":["r"]},{"start":{"row":140,"column":34},"end":{"row":140,"column":35},"action":"insert","lines":["_"]},{"start":{"row":140,"column":35},"end":{"row":140,"column":36},"action":"insert","lines":["d"]},{"start":{"row":140,"column":36},"end":{"row":140,"column":37},"action":"insert","lines":["o"]},{"start":{"row":140,"column":37},"end":{"row":140,"column":38},"action":"insert","lines":["c"]}],[{"start":{"row":140,"column":27},"end":{"row":140,"column":38},"action":"remove","lines":["=\",user_doc"],"id":39}],[{"start":{"row":140,"column":27},"end":{"row":140,"column":28},"action":"insert","lines":["\""],"id":40}],[{"start":{"row":142,"column":69},"end":{"row":142,"column":70},"action":"insert","lines":["."],"id":41},{"start":{"row":142,"column":70},"end":{"row":142,"column":71},"action":"insert","lines":["l"]},{"start":{"row":142,"column":71},"end":{"row":142,"column":72},"action":"insert","lines":["o"]},{"start":{"row":142,"column":72},"end":{"row":142,"column":73},"action":"insert","lines":["w"]},{"start":{"row":142,"column":73},"end":{"row":142,"column":74},"action":"insert","lines":["e"]},{"start":{"row":142,"column":74},"end":{"row":142,"column":75},"action":"insert","lines":["r"]}],[{"start":{"row":142,"column":75},"end":{"row":142,"column":77},"action":"insert","lines":["()"],"id":42}],[{"start":{"row":140,"column":27},"end":{"row":140,"column":28},"action":"insert","lines":["1"],"id":43}],[{"start":{"row":141,"column":37},"end":{"row":142,"column":0},"action":"insert","lines":["",""],"id":44},{"start":{"row":142,"column":0},"end":{"row":142,"column":20},"action":"insert","lines":["                    "]},{"start":{"row":142,"column":20},"end":{"row":142,"column":21},"action":"insert","lines":["p"]},{"start":{"row":142,"column":21},"end":{"row":142,"column":22},"action":"insert","lines":["r"]},{"start":{"row":142,"column":22},"end":{"row":142,"column":23},"action":"insert","lines":["i"]},{"start":{"row":142,"column":23},"end":{"row":142,"column":24},"action":"insert","lines":["n"]},{"start":{"row":142,"column":24},"end":{"row":142,"column":25},"action":"insert","lines":["t"]}],[{"start":{"row":142,"column":25},"end":{"row":142,"column":27},"action":"insert","lines":["()"],"id":45}],[{"start":{"row":142,"column":26},"end":{"row":142,"column":27},"action":"insert","lines":["s"],"id":46},{"start":{"row":142,"column":27},"end":{"row":142,"column":28},"action":"insert","lines":["e"]},{"start":{"row":142,"column":28},"end":{"row":142,"column":29},"action":"insert","lines":["s"]},{"start":{"row":142,"column":29},"end":{"row":142,"column":30},"action":"insert","lines":["s"]},{"start":{"row":142,"column":30},"end":{"row":142,"column":31},"action":"insert","lines":["i"]},{"start":{"row":142,"column":31},"end":{"row":142,"column":32},"action":"insert","lines":["o"]},{"start":{"row":142,"column":32},"end":{"row":142,"column":33},"action":"insert","lines":["n"]}],[{"start":{"row":142,"column":33},"end":{"row":142,"column":35},"action":"insert","lines":["[]"],"id":47}],[{"start":{"row":142,"column":34},"end":{"row":142,"column":36},"action":"insert","lines":["\"\""],"id":48}],[{"start":{"row":142,"column":35},"end":{"row":142,"column":36},"action":"insert","lines":["u"],"id":49},{"start":{"row":142,"column":36},"end":{"row":142,"column":37},"action":"insert","lines":["s"]},{"start":{"row":142,"column":37},"end":{"row":142,"column":38},"action":"insert","lines":["e"]},{"start":{"row":142,"column":38},"end":{"row":142,"column":39},"action":"insert","lines":["r"]}],[{"start":{"row":143,"column":69},"end":{"row":143,"column":77},"action":"remove","lines":[".lower()"],"id":50}],[{"start":{"row":144,"column":2},"end":{"row":144,"column":46},"action":"remove","lines":["                  print(\"user_doc\",user_doc)"],"id":51},{"start":{"row":144,"column":1},"end":{"row":144,"column":2},"action":"remove","lines":[" "]}],[{"start":{"row":144,"column":0},"end":{"row":144,"column":1},"action":"remove","lines":[" "],"id":52},{"start":{"row":143,"column":71},"end":{"row":144,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":141,"column":37},"end":{"row":142,"column":42},"action":"remove","lines":["","                    print(session[\"user\"])"],"id":53}],[{"start":{"row":140,"column":0},"end":{"row":140,"column":30},"action":"remove","lines":["                print(\"user1\")"],"id":54},{"start":{"row":139,"column":16},"end":{"row":140,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":151,"column":0},"end":{"row":151,"column":76},"action":"remove","lines":["                        print(\"user_doc[favourites]\",user_doc[\"favourites\"])"],"id":55},{"start":{"row":150,"column":159},"end":{"row":151,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":400,"column":0},"end":{"row":400,"column":21},"action":"remove","lines":["        filter='true'"],"id":58},{"start":{"row":400,"column":0},"end":{"row":401,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":466,"column":0},"end":{"row":467,"column":0},"action":"insert","lines":["",""],"id":59}],[{"start":{"row":467,"column":0},"end":{"row":467,"column":4},"action":"insert","lines":["    "],"id":60}],[{"start":{"row":467,"column":4},"end":{"row":467,"column":8},"action":"insert","lines":["    "],"id":61}],[{"start":{"row":467,"column":8},"end":{"row":467,"column":9},"action":"insert","lines":["p"],"id":62},{"start":{"row":467,"column":9},"end":{"row":467,"column":10},"action":"insert","lines":["r"]},{"start":{"row":467,"column":10},"end":{"row":467,"column":11},"action":"insert","lines":["i"]},{"start":{"row":467,"column":11},"end":{"row":467,"column":12},"action":"insert","lines":["n"]},{"start":{"row":467,"column":12},"end":{"row":467,"column":13},"action":"insert","lines":["t"]}],[{"start":{"row":467,"column":13},"end":{"row":467,"column":15},"action":"insert","lines":["()"],"id":63}],[{"start":{"row":467,"column":14},"end":{"row":467,"column":16},"action":"insert","lines":["\"\""],"id":64}],[{"start":{"row":467,"column":15},"end":{"row":467,"column":16},"action":"insert","lines":["f"],"id":65},{"start":{"row":467,"column":16},"end":{"row":467,"column":17},"action":"insert","lines":["i"]},{"start":{"row":467,"column":17},"end":{"row":467,"column":18},"action":"insert","lines":["l"]},{"start":{"row":467,"column":18},"end":{"row":467,"column":19},"action":"insert","lines":["t"]},{"start":{"row":467,"column":19},"end":{"row":467,"column":20},"action":"insert","lines":["e"]},{"start":{"row":467,"column":20},"end":{"row":467,"column":21},"action":"insert","lines":["r"]},{"start":{"row":467,"column":21},"end":{"row":467,"column":22},"action":"insert","lines":["_"]},{"start":{"row":467,"column":22},"end":{"row":467,"column":23},"action":"insert","lines":["A"]},{"start":{"row":467,"column":23},"end":{"row":467,"column":24},"action":"insert","lines":["u"]},{"start":{"row":467,"column":24},"end":{"row":467,"column":25},"action":"insert","lines":["t"]},{"start":{"row":467,"column":25},"end":{"row":467,"column":26},"action":"insert","lines":["h"]},{"start":{"row":467,"column":26},"end":{"row":467,"column":27},"action":"insert","lines":["o"]},{"start":{"row":467,"column":27},"end":{"row":467,"column":28},"action":"insert","lines":["r"]}],[{"start":{"row":467,"column":29},"end":{"row":467,"column":30},"action":"insert","lines":[","],"id":66},{"start":{"row":467,"column":30},"end":{"row":467,"column":31},"action":"insert","lines":["f"]},{"start":{"row":467,"column":31},"end":{"row":467,"column":32},"action":"insert","lines":["i"]},{"start":{"row":467,"column":32},"end":{"row":467,"column":33},"action":"insert","lines":["l"]},{"start":{"row":467,"column":33},"end":{"row":467,"column":34},"action":"insert","lines":["t"]},{"start":{"row":467,"column":34},"end":{"row":467,"column":35},"action":"insert","lines":["e"]},{"start":{"row":467,"column":35},"end":{"row":467,"column":36},"action":"insert","lines":["r"]},{"start":{"row":467,"column":36},"end":{"row":467,"column":37},"action":"insert","lines":["_"]},{"start":{"row":467,"column":37},"end":{"row":467,"column":38},"action":"insert","lines":["a"]}],[{"start":{"row":467,"column":38},"end":{"row":467,"column":39},"action":"insert","lines":["u"],"id":67},{"start":{"row":467,"column":39},"end":{"row":467,"column":40},"action":"insert","lines":["t"]},{"start":{"row":467,"column":40},"end":{"row":467,"column":41},"action":"insert","lines":["h"]},{"start":{"row":467,"column":41},"end":{"row":467,"column":42},"action":"insert","lines":["o"]},{"start":{"row":467,"column":42},"end":{"row":467,"column":43},"action":"insert","lines":["r"]}],[{"start":{"row":467,"column":44},"end":{"row":468,"column":0},"action":"insert","lines":["",""],"id":68},{"start":{"row":468,"column":0},"end":{"row":468,"column":8},"action":"insert","lines":["        "]},{"start":{"row":468,"column":8},"end":{"row":468,"column":9},"action":"insert","lines":["p"]},{"start":{"row":468,"column":9},"end":{"row":468,"column":10},"action":"insert","lines":["r"]},{"start":{"row":468,"column":10},"end":{"row":468,"column":11},"action":"insert","lines":["i"]},{"start":{"row":468,"column":11},"end":{"row":468,"column":12},"action":"insert","lines":["n"]},{"start":{"row":468,"column":12},"end":{"row":468,"column":13},"action":"insert","lines":["t"]}],[{"start":{"row":468,"column":13},"end":{"row":468,"column":15},"action":"insert","lines":["()"],"id":69}],[{"start":{"row":468,"column":14},"end":{"row":468,"column":16},"action":"insert","lines":["\"\""],"id":70}],[{"start":{"row":468,"column":15},"end":{"row":468,"column":16},"action":"insert","lines":["f"],"id":71},{"start":{"row":468,"column":16},"end":{"row":468,"column":17},"action":"insert","lines":["i"]},{"start":{"row":468,"column":17},"end":{"row":468,"column":18},"action":"insert","lines":["l"]},{"start":{"row":468,"column":18},"end":{"row":468,"column":19},"action":"insert","lines":["t"]},{"start":{"row":468,"column":19},"end":{"row":468,"column":20},"action":"insert","lines":["e"]},{"start":{"row":468,"column":20},"end":{"row":468,"column":21},"action":"insert","lines":["r"]},{"start":{"row":468,"column":21},"end":{"row":468,"column":22},"action":"insert","lines":["_"]},{"start":{"row":468,"column":22},"end":{"row":468,"column":23},"action":"insert","lines":["d"]},{"start":{"row":468,"column":23},"end":{"row":468,"column":24},"action":"insert","lines":["i"]},{"start":{"row":468,"column":24},"end":{"row":468,"column":25},"action":"insert","lines":["c"]},{"start":{"row":468,"column":25},"end":{"row":468,"column":26},"action":"insert","lines":["t"]}],[{"start":{"row":468,"column":27},"end":{"row":468,"column":28},"action":"insert","lines":[","],"id":72},{"start":{"row":468,"column":28},"end":{"row":468,"column":29},"action":"insert","lines":["f"]},{"start":{"row":468,"column":29},"end":{"row":468,"column":30},"action":"insert","lines":["i"]},{"start":{"row":468,"column":30},"end":{"row":468,"column":31},"action":"insert","lines":["l"]},{"start":{"row":468,"column":31},"end":{"row":468,"column":32},"action":"insert","lines":["c"]}],[{"start":{"row":468,"column":28},"end":{"row":468,"column":32},"action":"remove","lines":["filc"],"id":73}],[{"start":{"row":468,"column":28},"end":{"row":468,"column":29},"action":"insert","lines":["_"],"id":74},{"start":{"row":468,"column":29},"end":{"row":468,"column":30},"action":"insert","lines":["f"]},{"start":{"row":468,"column":30},"end":{"row":468,"column":31},"action":"insert","lines":["i"]},{"start":{"row":468,"column":31},"end":{"row":468,"column":32},"action":"insert","lines":["l"]},{"start":{"row":468,"column":32},"end":{"row":468,"column":33},"action":"insert","lines":["t"]},{"start":{"row":468,"column":33},"end":{"row":468,"column":34},"action":"insert","lines":["e"]},{"start":{"row":468,"column":34},"end":{"row":468,"column":35},"action":"insert","lines":["r"]},{"start":{"row":468,"column":35},"end":{"row":468,"column":36},"action":"insert","lines":["_"]},{"start":{"row":468,"column":36},"end":{"row":468,"column":37},"action":"insert","lines":["d"]},{"start":{"row":468,"column":37},"end":{"row":468,"column":38},"action":"insert","lines":["i"]},{"start":{"row":468,"column":38},"end":{"row":468,"column":39},"action":"insert","lines":["c"]},{"start":{"row":468,"column":39},"end":{"row":468,"column":40},"action":"insert","lines":["t"]}],[{"start":{"row":467,"column":0},"end":{"row":469,"column":0},"action":"remove","lines":["        print(\"filter_Author\",filter_author)","        print(\"filter_dict\",_filter_dict)",""],"id":75}],[{"start":{"row":470,"column":0},"end":{"row":472,"column":0},"action":"insert","lines":["        print(\"filter_Author\",filter_author)","        print(\"filter_dict\",_filter_dict)",""],"id":76}],[{"start":{"row":470,"column":0},"end":{"row":470,"column":4},"action":"remove","lines":["    "],"id":77}],[{"start":{"row":471,"column":0},"end":{"row":471,"column":4},"action":"remove","lines":["    "],"id":78}],[{"start":{"row":399,"column":45},"end":{"row":400,"column":0},"action":"insert","lines":["",""],"id":79},{"start":{"row":400,"column":0},"end":{"row":400,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":400,"column":8},"end":{"row":400,"column":63},"action":"insert","lines":["_filter_dict.update({\"author\" : filter_author.lower()})"],"id":80}],[{"start":{"row":471,"column":0},"end":{"row":472,"column":37},"action":"remove","lines":["    print(\"filter_Author\",filter_author)","    print(\"filter_dict\",_filter_dict)"],"id":81},{"start":{"row":470,"column":39},"end":{"row":471,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":288,"column":83},"end":{"row":289,"column":0},"action":"insert","lines":["",""],"id":95},{"start":{"row":289,"column":0},"end":{"row":289,"column":20},"action":"insert","lines":["                    "]},{"start":{"row":289,"column":20},"end":{"row":289,"column":21},"action":"insert","lines":["p"]},{"start":{"row":289,"column":21},"end":{"row":289,"column":22},"action":"insert","lines":["r"]},{"start":{"row":289,"column":22},"end":{"row":289,"column":23},"action":"insert","lines":["i"]},{"start":{"row":289,"column":23},"end":{"row":289,"column":24},"action":"insert","lines":["n"]},{"start":{"row":289,"column":24},"end":{"row":289,"column":25},"action":"insert","lines":["t"]}],[{"start":{"row":289,"column":25},"end":{"row":289,"column":27},"action":"insert","lines":["()"],"id":96}],[{"start":{"row":289,"column":26},"end":{"row":289,"column":27},"action":"insert","lines":["n"],"id":97},{"start":{"row":289,"column":27},"end":{"row":289,"column":28},"action":"insert","lines":["e"]},{"start":{"row":289,"column":28},"end":{"row":289,"column":29},"action":"insert","lines":["w"]}],[{"start":{"row":289,"column":28},"end":{"row":289,"column":29},"action":"remove","lines":["w"],"id":98},{"start":{"row":289,"column":27},"end":{"row":289,"column":28},"action":"remove","lines":["e"]},{"start":{"row":289,"column":26},"end":{"row":289,"column":27},"action":"remove","lines":["n"]}],[{"start":{"row":289,"column":26},"end":{"row":289,"column":28},"action":"insert","lines":["\"\""],"id":99}],[{"start":{"row":289,"column":27},"end":{"row":289,"column":28},"action":"insert","lines":["="],"id":100},{"start":{"row":289,"column":28},"end":{"row":289,"column":29},"action":"insert","lines":["n"]}],[{"start":{"row":289,"column":28},"end":{"row":289,"column":29},"action":"remove","lines":["n"],"id":101},{"start":{"row":289,"column":27},"end":{"row":289,"column":28},"action":"remove","lines":["="]}],[{"start":{"row":289,"column":27},"end":{"row":289,"column":28},"action":"insert","lines":["e"],"id":102},{"start":{"row":289,"column":28},"end":{"row":289,"column":29},"action":"insert","lines":["w"]},{"start":{"row":289,"column":29},"end":{"row":289,"column":30},"action":"insert","lines":["_"]},{"start":{"row":289,"column":30},"end":{"row":289,"column":31},"action":"insert","lines":["C"]},{"start":{"row":289,"column":31},"end":{"row":289,"column":32},"action":"insert","lines":["a"]}],[{"start":{"row":289,"column":31},"end":{"row":289,"column":32},"action":"remove","lines":["a"],"id":103},{"start":{"row":289,"column":30},"end":{"row":289,"column":31},"action":"remove","lines":["C"]},{"start":{"row":289,"column":29},"end":{"row":289,"column":30},"action":"remove","lines":["_"]},{"start":{"row":289,"column":28},"end":{"row":289,"column":29},"action":"remove","lines":["w"]}],[{"start":{"row":289,"column":28},"end":{"row":289,"column":29},"action":"insert","lines":["b"],"id":104},{"start":{"row":289,"column":29},"end":{"row":289,"column":30},"action":"insert","lines":["n"]}],[{"start":{"row":289,"column":29},"end":{"row":289,"column":30},"action":"remove","lines":["n"],"id":105},{"start":{"row":289,"column":28},"end":{"row":289,"column":29},"action":"remove","lines":["b"]},{"start":{"row":289,"column":27},"end":{"row":289,"column":28},"action":"remove","lines":["e"]}],[{"start":{"row":289,"column":27},"end":{"row":289,"column":28},"action":"insert","lines":["n"],"id":106},{"start":{"row":289,"column":28},"end":{"row":289,"column":29},"action":"insert","lines":["e"]},{"start":{"row":289,"column":29},"end":{"row":289,"column":30},"action":"insert","lines":["w"]},{"start":{"row":289,"column":30},"end":{"row":289,"column":31},"action":"insert","lines":["_"]},{"start":{"row":289,"column":31},"end":{"row":289,"column":32},"action":"insert","lines":["c"]},{"start":{"row":289,"column":32},"end":{"row":289,"column":33},"action":"insert","lines":["a"]},{"start":{"row":289,"column":33},"end":{"row":289,"column":34},"action":"insert","lines":["t"]},{"start":{"row":289,"column":34},"end":{"row":289,"column":35},"action":"insert","lines":["e"]},{"start":{"row":289,"column":35},"end":{"row":289,"column":36},"action":"insert","lines":["g"]}],[{"start":{"row":289,"column":35},"end":{"row":289,"column":36},"action":"remove","lines":["g"],"id":107}],[{"start":{"row":289,"column":35},"end":{"row":289,"column":36},"action":"insert","lines":["g"],"id":108},{"start":{"row":289,"column":36},"end":{"row":289,"column":37},"action":"insert","lines":["o"]},{"start":{"row":289,"column":37},"end":{"row":289,"column":38},"action":"insert","lines":["r"]},{"start":{"row":289,"column":38},"end":{"row":289,"column":39},"action":"insert","lines":["y"]},{"start":{"row":289,"column":39},"end":{"row":289,"column":40},"action":"insert","lines":["_"]},{"start":{"row":289,"column":40},"end":{"row":289,"column":41},"action":"insert","lines":["d"]},{"start":{"row":289,"column":41},"end":{"row":289,"column":42},"action":"insert","lines":["o"]},{"start":{"row":289,"column":42},"end":{"row":289,"column":43},"action":"insert","lines":["c"]}],[{"start":{"row":289,"column":44},"end":{"row":289,"column":45},"action":"insert","lines":[","],"id":109},{"start":{"row":289,"column":45},"end":{"row":289,"column":46},"action":"insert","lines":["n"]},{"start":{"row":289,"column":46},"end":{"row":289,"column":47},"action":"insert","lines":["e"]},{"start":{"row":289,"column":47},"end":{"row":289,"column":48},"action":"insert","lines":["w"]},{"start":{"row":289,"column":48},"end":{"row":289,"column":49},"action":"insert","lines":["_"]},{"start":{"row":289,"column":49},"end":{"row":289,"column":50},"action":"insert","lines":["C"]},{"start":{"row":289,"column":50},"end":{"row":289,"column":51},"action":"insert","lines":["a"]},{"start":{"row":289,"column":51},"end":{"row":289,"column":52},"action":"insert","lines":["t"]},{"start":{"row":289,"column":52},"end":{"row":289,"column":53},"action":"insert","lines":["e"]}],[{"start":{"row":289,"column":52},"end":{"row":289,"column":53},"action":"remove","lines":["e"],"id":110},{"start":{"row":289,"column":51},"end":{"row":289,"column":52},"action":"remove","lines":["t"]},{"start":{"row":289,"column":50},"end":{"row":289,"column":51},"action":"remove","lines":["a"]},{"start":{"row":289,"column":49},"end":{"row":289,"column":50},"action":"remove","lines":["C"]}],[{"start":{"row":289,"column":49},"end":{"row":289,"column":50},"action":"insert","lines":["c"],"id":111},{"start":{"row":289,"column":50},"end":{"row":289,"column":51},"action":"insert","lines":["a"]},{"start":{"row":289,"column":51},"end":{"row":289,"column":52},"action":"insert","lines":["t"]},{"start":{"row":289,"column":52},"end":{"row":289,"column":53},"action":"insert","lines":["g"]},{"start":{"row":289,"column":53},"end":{"row":289,"column":54},"action":"insert","lines":["e"]}],[{"start":{"row":289,"column":53},"end":{"row":289,"column":54},"action":"remove","lines":["e"],"id":112},{"start":{"row":289,"column":52},"end":{"row":289,"column":53},"action":"remove","lines":["g"]}],[{"start":{"row":289,"column":52},"end":{"row":289,"column":53},"action":"insert","lines":["e"],"id":113},{"start":{"row":289,"column":53},"end":{"row":289,"column":54},"action":"insert","lines":["g"]}],[{"start":{"row":289,"column":45},"end":{"row":289,"column":54},"action":"remove","lines":["new_categ"],"id":114},{"start":{"row":289,"column":45},"end":{"row":289,"column":57},"action":"insert","lines":["new_category"]}],[{"start":{"row":289,"column":57},"end":{"row":289,"column":58},"action":"insert","lines":["_"],"id":115},{"start":{"row":289,"column":58},"end":{"row":289,"column":59},"action":"insert","lines":["d"]},{"start":{"row":289,"column":59},"end":{"row":289,"column":60},"action":"insert","lines":["o"]},{"start":{"row":289,"column":60},"end":{"row":289,"column":61},"action":"insert","lines":["c"]}],[{"start":{"row":289,"column":0},"end":{"row":289,"column":62},"action":"remove","lines":["                    print(\"new_category_doc\",new_category_doc)"],"id":116},{"start":{"row":288,"column":83},"end":{"row":289,"column":0},"action":"remove","lines":["",""]}]]},"ace":{"folds":[{"start":{"row":73,"column":27},"end":{"row":94,"column":147},"placeholder":"..."},{"start":{"row":315,"column":13},"end":{"row":349,"column":105},"placeholder":"..."},{"start":{"row":493,"column":30},"end":{"row":512,"column":102},"placeholder":"..."},{"start":{"row":515,"column":20},"end":{"row":555,"column":60},"placeholder":"..."},{"start":{"row":557,"column":42},"end":{"row":563,"column":62},"placeholder":"..."}],"scrolltop":3319,"scrollleft":0,"selection":{"start":{"row":288,"column":83},"end":{"row":288,"column":83},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":183,"state":"start","mode":"ace/mode/python"}},"timestamp":1566248973047}